#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <string>
#include <dlfcn.h>


#include <sys/types.h>
#include <sys/socket.h>
#include <sys/timeb.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>



#include <sys/ioctl.h>
#include <fcntl.h>

#include <errno.h>
#include <time.h>

#include "email.h"


int readresponse(int sd, int iTimeout)
{
    struct timeb tm,tm2;
    int val;
    char buf[2048];

    ftime(&tm);
    
    while ( (val = read(sd,buf,2048))!=0 ) {
        if (val>0) {
            buf[val]='\0';
            printf ("%s\n",buf);
            break;
        } 
        ftime(&tm2);

        int mill = (tm2.time*1000+tm2.millitm)-(tm.time*1000+tm.millitm);

        if ( mill > iTimeout ) {
            return -1;
        }
    }
    return 0;
}

int smtpdialog(int sd, char *mail, char *html)
{
	char buf[2048];
    int retval;

    // Ok, lets talk SMTP.
	strcpy(buf,"HELO\r\n");

	retval = write(sd, buf, strlen(buf));

    if (retval < 0 || readresponse(sd, 10000)!=0) {
        return -1;
    }

    // I have to use a valid sender.
	strcpy(buf,"MAIL FROM: server@gmail.com\r\n");

    retval = write(sd,buf,strlen(buf));

    if (retval < 0 || readresponse(sd, 10000)!=0) {
        return -1;
    }

	char *aux2 = mail;
	char *aux1;

	int size, offset;

    // Ok, lets parse destinations.
	do {
		aux1 = strstr(aux2,";");

		if (aux1 != NULL) {
			size = abs(aux1-aux2);
		} else {
			size = strlen(aux2);
		}

		char buff[200];
		strncpy(buff, aux2,size);
		buff[size]='\0';
		printf ("Generando mail para %s\r\n", buff);

		sprintf (buf, "RCPT TO: %s\r\n", buff);

        retval = write(sd,buf,strlen(buf));

        if (retval < 0 || readresponse(sd, 10000)!=0) {
            return -1;
        }
		
		aux2 = aux1+1;


	} while ( aux1 != NULL );
	

    // Ok, now send data.
	strcpy(buf,"DATA\r\n");

    retval = write(sd,buf,strlen(buf));
    if (retval < 0 || readresponse(sd, 10000)!=0) {
        return -1;
    }

	time_t ltime;
	char tmpbuf[1048];
	struct tm *today;

	time( &ltime );

	today = localtime( &ltime );

	strftime( tmpbuf, 128, "%d-%m-%Y %H:%M:%S", today);

	sprintf(buf,"Subject: Alerta de Status de aplicaciones %s\r\n", tmpbuf);

    // Mail subject.
    retval = write(sd,buf,strlen(buf));
    if (retval < 0 ) {
        return -1;
    }

	
	strcpy(buf,"Content-Type: text/html\r\n\r\n");

    retval = write(sd,buf,strlen(buf));
    if (retval < 0 ) {
        return -1;
    }

    strcpy(buf,html);

    retval = write(sd,buf,strlen(buf));
    if (retval < 0 ) {
        return -1;
    }

	strcpy(buf,"\r\n.\r\n");
	
	retval = write(sd,buf,strlen(buf));
    if (retval < 0 || readresponse(sd, 10000)!=0) {
        return -1;
    }
	
    // Terminating.
	strcpy(buf, "QUIT\r\n");

	retval = write(sd,buf,strlen(buf));

    if (retval < 0 || readresponse(sd, 10000)!=0) {
        return -1;
    }

    return 0;

}

/**
 * Envia un email de reporting con el resultado del procesamiento .
 *
 * El mail se envia en formato html.
 *
 **/
int sendmail(char *host, char *port, char *mail,char *html) 
{
    int sd;
    int flags;
    struct sockaddr_in sa ;

    struct hostent *hp;
    int val, retval;

    if ( (sd = socket(AF_INET, SOCK_STREAM, 0)) < 0 ) {
        printf ("Error al crear el socket.\n");
        return -1;
    }

    memset(&sa, '\0', sizeof(sa));

    sa.sin_family       = AF_INET;
    sa.sin_addr.s_addr        = inet_addr(host);
    sa.sin_port         = htons( atoi(port) );

    if ( (connect(sd, (struct sockaddr*)&sa, sizeof(sa))) < 0 ) {
        printf ("Error al conectarse\n");
        return -1;
    }

    if ( (flags = fcntl(sd, F_GETFL, 0)) < 0) {
	    printf ("Error fcntl get.");
    } else {
	    flags |= O_NONBLOCK;
	    if (fcntl(sd, F_SETFL, flags) < 0) {
    	    printf ("Error fcntl set");
        }  else {
	        //printf ("Setting NONBLOCKING IO");
        }
    }

    printf ("Connect to %s:%s successfully\n", host, port);

    smtpdialog(sd,mail,html);

	close(sd);

	return 0;
}

/**
int main(int argc, char *argv[])
{
    char mail[248];
    int i;
    for(i=0;i<10;i++) {
        strcpy(mail,"ramele@visa.com.ar");
        sendmail("172.16.0.21","25",mail,"<html><body>hola</body></html>");
    }
    return 0;
}
**/


